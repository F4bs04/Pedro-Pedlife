"""
üî¨ INTEGRA√á√ÉO PUBMED PARA O AGENTE PEDRO
Consulta inteligente √† base cient√≠fica quando o RAG local n√£o tem informa√ß√£o suficiente
"""

import requests
import json
import time
import xml.etree.ElementTree as ET
from typing import Dict, List, Optional, Tuple
import os
from dataclasses import dataclass
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class PubMedArticle:
    """Estrutura para armazenar dados de um artigo do PubMed"""
    pubmed_id: str
    title: str
    abstract: str
    journal: str
    doi: str
    issn: str
    authors: List[str]
    publication_date: str
    relevance_score: float = 0.0

class PubMedAPI:
    """
    üî¨ CLIENTE PARA API DO PUBMED
    
    Funcionalidades:
    - Busca por termos m√©dicos
    - Obten√ß√£o de abstracts completos
    - Rate limiting autom√°tico
    - Valida√ß√£o de relev√¢ncia
    """
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Inicializa cliente PubMed
        
        Args:
            api_key: Chave da API (opcional, mas recomendada para 10 req/s)
        """
        self.api_key = api_key or os.getenv('PUBMED_API_KEY', '')
        self.base_search_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"
        self.base_fetch_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"
        self.last_request_time = 0
        self.min_interval = 0.1  # 100ms entre requests (10 req/s max)
        
        logger.info(f"üî¨ PubMed API inicializada {'com' if self.api_key else 'sem'} API key")
    
    def _rate_limit(self):
        """Aplica rate limiting para respeitar limites da API"""
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        
        if time_since_last < self.min_interval:
            sleep_time = self.min_interval - time_since_last
            time.sleep(sleep_time)
        
        self.last_request_time = time.time()
    
    def search_articles(self, query: str, max_results: int = 5) -> List[str]:
        """
        üîç BUSCA ARTIGOS POR TERMO M√âDICO
        
        Args:
            query: Termo de busca m√©dico
            max_results: M√°ximo de resultados
            
        Returns:
            Lista de PubMed IDs encontrados
        """
        try:
            self._rate_limit()
            
            params = {
                'db': 'pubmed',
                'retmode': 'json',
                'retmax': max_results,
                'term': query,
                'sort': 'relevance'  # Ordenar por relev√¢ncia
            }
            
            if self.api_key:
                params['api_key'] = self.api_key
            
            logger.info(f"üîç Buscando no PubMed: '{query}'")
            response = requests.get(self.base_search_url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            pubmed_ids = data.get('esearchresult', {}).get('idlist', [])
            
            logger.info(f"üìä Encontrados {len(pubmed_ids)} artigos para '{query}'")
            return pubmed_ids
            
        except Exception as e:
            logger.error(f"‚ùå Erro na busca PubMed: {e}")
            return []
    
    def fetch_article_details(self, pubmed_id: str) -> Optional[PubMedArticle]:
        """
        üìÑ OBT√âM DETALHES COMPLETOS DE UM ARTIGO
        
        Args:
            pubmed_id: ID do artigo no PubMed
            
        Returns:
            Objeto PubMedArticle com dados completos ou None se erro
        """
        try:
            self._rate_limit()
            
            params = {
                'db': 'pubmed',
                'id': pubmed_id,
                'rettype': 'abstract',
                'retmode': 'xml'
            }
            
            if self.api_key:
                params['api_key'] = self.api_key
            
            response = requests.get(self.base_fetch_url, params=params, timeout=15)
            response.raise_for_status()
            
            # Parse XML response
            root = ET.fromstring(response.text)
            
            # Extrair dados do XML
            article_data = self._parse_article_xml(root, pubmed_id)
            
            if article_data:
                logger.info(f"üìÑ Artigo {pubmed_id} obtido com sucesso")
                return article_data
            else:
                logger.warning(f"‚ö†Ô∏è Dados insuficientes para artigo {pubmed_id}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter artigo {pubmed_id}: {e}")
            return None
    
    def _parse_article_xml(self, root: ET.Element, pubmed_id: str) -> Optional[PubMedArticle]:
        """
        üîß PARSE DOS DADOS XML DO ARTIGO
        
        Args:
            root: Elemento raiz do XML
            pubmed_id: ID do artigo
            
        Returns:
            PubMedArticle com dados extra√≠dos
        """
        try:
            # T√≠tulo
            title_elem = root.find('.//ArticleTitle')
            title = title_elem.text if title_elem is not None else "T√≠tulo n√£o dispon√≠vel"
            
            # Abstract
            abstract_elem = root.find('.//AbstractText')
            abstract = abstract_elem.text if abstract_elem is not None else "Abstract n√£o dispon√≠vel"
            
            # Journal
            journal_elem = root.find('.//Journal/Title')
            journal = journal_elem.text if journal_elem is not None else "Journal n√£o informado"
            
            # DOI
            doi_elem = root.find('.//ELocationID[@EIdType="doi"]')
            doi = doi_elem.text if doi_elem is not None else ""
            
            # ISSN
            issn_elem = root.find('.//ISSN')
            issn = issn_elem.text if issn_elem is not None else ""
            
            # Autores
            authors = []
            for author_elem in root.findall('.//Author'):
                lastname = author_elem.find('LastName')
                firstname = author_elem.find('ForeName')
                if lastname is not None and firstname is not None:
                    authors.append(f"{firstname.text} {lastname.text}")
            
            # Data de publica√ß√£o
            pub_date_elem = root.find('.//PubDate/Year')
            pub_date = pub_date_elem.text if pub_date_elem is not None else "Data n√£o informada"
            
            return PubMedArticle(
                pubmed_id=pubmed_id,
                title=title,
                abstract=abstract,
                journal=journal,
                doi=doi,
                issn=issn,
                authors=authors,
                publication_date=pub_date
            )
            
        except Exception as e:
            logger.error(f"‚ùå Erro no parse XML: {e}")
            return None
    
    def intelligent_search(self, medical_query: str, max_articles: int = 3) -> List[PubMedArticle]:
        """
        üß† BUSCA INTELIGENTE COM VALIDA√á√ÉO DE RELEV√ÇNCIA
        
        Args:
            medical_query: Query m√©dica para buscar
            max_articles: M√°ximo de artigos a retornar
            
        Returns:
            Lista de artigos relevantes ordenados por relev√¢ncia
        """
        logger.info(f"üß† Iniciando busca inteligente PubMed: '{medical_query}'")
        
        # 1. Buscar IDs dos artigos
        pubmed_ids = self.search_articles(medical_query, max_articles * 2)
        
        if not pubmed_ids:
            logger.warning("‚ö†Ô∏è Nenhum artigo encontrado no PubMed")
            return []
        
        # 2. Obter detalhes dos artigos
        articles = []
        for pubmed_id in pubmed_ids[:max_articles]:
            article = self.fetch_article_details(pubmed_id)
            if article:
                # Calcular score de relev√¢ncia b√°sico
                article.relevance_score = self._calculate_relevance(article, medical_query)
                articles.append(article)
        
        # 3. Ordenar por relev√¢ncia
        articles.sort(key=lambda x: x.relevance_score, reverse=True)
        
        logger.info(f"üìä Retornando {len(articles)} artigos relevantes")
        return articles
    
    def _calculate_relevance(self, article: PubMedArticle, query: str) -> float:
        """
        üìä CALCULA SCORE DE RELEV√ÇNCIA SIMPLES
        
        Args:
            article: Artigo para avaliar
            query: Query original
            
        Returns:
            Score de relev√¢ncia (0-1)
        """
        query_terms = query.lower().split()
        text_to_search = f"{article.title} {article.abstract}".lower()
        
        matches = sum(1 for term in query_terms if term in text_to_search)
        relevance = matches / len(query_terms) if query_terms else 0
        
        return min(relevance, 1.0)

class PedroWithPubMed:
    """
    ü§ñ PEDRO COM INTEGRA√á√ÉO PUBMED
    
    Combina RAG local com consulta cient√≠fica externa quando necess√°rio
    """
    
    def __init__(self, pubmed_api_key: Optional[str] = None):
        """
        Inicializa Pedro com capacidade PubMed
        
        Args:
            pubmed_api_key: Chave da API PubMed (opcional)
        """
        self.pubmed = PubMedAPI(pubmed_api_key)
        logger.info("ü§ñ Pedro com PubMed inicializado")
    
    def should_consult_pubmed(self, rag_response: str, confidence_threshold: float = 0.7) -> bool:
        """
        ü§î DECIDE SE DEVE CONSULTAR PUBMED
        
        Crit√©rios:
        - Resposta do RAG muito gen√©rica
        - Baixa confian√ßa na resposta
        - Men√ß√£o expl√≠cita de falta de informa√ß√£o
        
        Args:
            rag_response: Resposta do RAG local
            confidence_threshold: Limite de confian√ßa
            
        Returns:
            True se deve consultar PubMed
        """
        # Indicadores de baixa qualidade/confian√ßa
        low_confidence_indicators = [
            "n√£o tenho informa√ß√£o",
            "n√£o encontrei",
            "n√£o sei",
            "n√£o est√° dispon√≠vel",
            "informa√ß√£o insuficiente",
            "dados limitados",
            "n√£o h√° dados espec√≠ficos"
        ]
        
        rag_lower = rag_response.lower()
        
        # Verificar indicadores de baixa confian√ßa
        has_low_confidence = any(indicator in rag_lower for indicator in low_confidence_indicators)
        
        # Verificar se resposta √© muito curta (pode ser gen√©rica)
        is_too_short = len(rag_response.split()) < 20
        
        should_consult = has_low_confidence or is_too_short
        
        if should_consult:
            logger.info("ü§î RAG local insuficiente, consultando PubMed...")
        
        return should_consult
    
    def enhanced_clinical_search(self, query: str, rag_response: str = "") -> Dict:
        """
        üî¨ BUSCA CL√çNICA APRIMORADA COM PUBMED
        
        Args:
            query: Query cl√≠nica
            rag_response: Resposta do RAG local (opcional)
            
        Returns:
            Dicion√°rio com resposta combinada e fontes
        """
        result = {
            'query': query,
            'rag_response': rag_response,
            'pubmed_consulted': False,
            'pubmed_articles': [],
            'final_response': rag_response,
            'sources': ['RAG Pedlife']
        }
        
        # Decidir se deve consultar PubMed
        if self.should_consult_pubmed(rag_response):
            logger.info("üî¨ Consultando PubMed para informa√ß√£o adicional...")
            
            # Buscar artigos relevantes
            articles = self.pubmed.intelligent_search(query, max_articles=3)
            
            if articles:
                result['pubmed_consulted'] = True
                result['pubmed_articles'] = articles
                result['sources'].append('PubMed')
                
                # Combinar resposta RAG com evid√™ncias PubMed
                pubmed_summary = self._create_pubmed_summary(articles)
                result['final_response'] = self._combine_responses(rag_response, pubmed_summary)
                
                logger.info(f"‚úÖ Resposta enriquecida com {len(articles)} artigos PubMed")
            else:
                logger.warning("‚ö†Ô∏è Nenhum artigo relevante encontrado no PubMed")
        
        return result
    
    def _create_pubmed_summary(self, articles: List[PubMedArticle]) -> str:
        """
        üìù CRIA RESUMO DOS ARTIGOS PUBMED
        
        Args:
            articles: Lista de artigos PubMed
            
        Returns:
            Resumo formatado dos artigos
        """
        if not articles:
            return ""
        
        summary_parts = ["\nüî¨ **EVID√äNCIAS CIENT√çFICAS ADICIONAIS (PubMed):**\n"]
        
        for i, article in enumerate(articles, 1):
            summary_parts.append(f"**{i}. {article.title}**")
            summary_parts.append(f"   üìÑ *{article.journal}* ({article.publication_date})")
            
            if article.doi:
                summary_parts.append(f"   üîó DOI: {article.doi}")
            
            # Resumo do abstract (primeiras 200 palavras)
            abstract_preview = article.abstract[:400] + "..." if len(article.abstract) > 400 else article.abstract
            summary_parts.append(f"   üìã **Resumo:** {abstract_preview}")
            
            if article.authors:
                authors_str = ", ".join(article.authors[:3])
                if len(article.authors) > 3:
                    authors_str += f" et al. ({len(article.authors)} autores)"
                summary_parts.append(f"   üë• **Autores:** {authors_str}")
            
            summary_parts.append(f"   üìä **Relev√¢ncia:** {article.relevance_score:.2f}")
            summary_parts.append("")
        
        return "\n".join(summary_parts)
    
    def _combine_responses(self, rag_response: str, pubmed_summary: str) -> str:
        """
        üîÑ COMBINA RESPOSTA RAG COM EVID√äNCIAS PUBMED
        
        Args:
            rag_response: Resposta do RAG local
            pubmed_summary: Resumo dos artigos PubMed
            
        Returns:
            Resposta combinada e estruturada
        """
        if not pubmed_summary:
            return rag_response
        
        combined = []
        
        # Resposta do RAG local
        if rag_response and len(rag_response.strip()) > 10:
            combined.append("üìö **INFORMA√á√ÉO DOS PROTOCOLOS PEDLIFE:**")
            combined.append(rag_response)
            combined.append("")
        
        # Evid√™ncias PubMed
        combined.append(pubmed_summary)
        
        # Disclaimer
        combined.append("---")
        combined.append("‚ö†Ô∏è **IMPORTANTE:** As informa√ß√µes do PubMed s√£o complementares aos protocolos Pedlife. Sempre consulte diretrizes locais e supervis√£o m√©dica adequada.")
        
        return "\n".join(combined)

# Fun√ß√£o de conveni√™ncia para uso direto
def search_pubmed_if_needed(query: str, rag_response: str = "", api_key: str = None) -> Dict:
    """
    üöÄ FUN√á√ÉO DE CONVENI√äNCIA PARA BUSCA PUBMED
    
    Args:
        query: Query cl√≠nica
        rag_response: Resposta do RAG (opcional)
        api_key: Chave da API PubMed (opcional)
        
    Returns:
        Resultado da busca combinada
    """
    pedro_pubmed = PedroWithPubMed(api_key)
    return pedro_pubmed.enhanced_clinical_search(query, rag_response)

if __name__ == "__main__":
    # Teste b√°sico
    print("üî¨ Testando integra√ß√£o PubMed...")
    
    # Exemplo de uso
    test_query = "midazolam pediatric sedation dosage"
    test_rag_response = "N√£o tenho informa√ß√£o espec√≠fica sobre essa dosagem."
    
    result = search_pubmed_if_needed(test_query, test_rag_response)
    
    print(f"Query: {result['query']}")
    print(f"PubMed consultado: {result['pubmed_consulted']}")
    print(f"Artigos encontrados: {len(result['pubmed_articles'])}")
    print(f"Fontes: {result['sources']}")
